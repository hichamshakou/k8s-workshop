apiVersion: batch/v1
kind: Job
metadata:
  name: vault-initializer
  namespace: vault
spec:
  backoffLimit: 0
  template:
    spec:
      serviceAccountName: vault-init-sa
      restartPolicy: Never
      containers:
      - name: vault-init
        image: hashicorp/vault:1.16
        imagePullPolicy: IfNotPresent
        env:
          - name: VAULT_ADDR
            value: "http://vault.vault.svc:8200"
        command:
          - /bin/sh
          - -c
          - |
            set -e
            apk add --no-cache jq curl bash
            curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.30.0/bin/linux/amd64/kubectl"
            chmod +x kubectl && mv kubectl /usr/local/bin/

            echo "Waiting for Vault service..."
            until curl -s $VAULT_ADDR/v1/sys/health >/dev/null 2>&1; do
              echo "Waiting for Vault to be reachable..."
              sleep 5
            done

            echo "Checking if Vault is already initialized..."
            if vault status | grep -q 'Initialized.*true'; then
              echo "Vault is already initialized. Exiting."
              exit 0
            fi

            echo "Vault not initialized. Initializing..."
            INIT_OUTPUT=$(vault operator init -key-shares=3 -key-threshold=2 -format=json)

            echo "Saving unseal keys and root token into Secret..."
            UNSEAL_KEYS=$(echo "$INIT_OUTPUT" | jq -r '.unseal_keys_b64 | join(",")')
            ROOT_TOKEN=$(echo "$INIT_OUTPUT" | jq -r '.root_token')

            /usr/local/bin/kubectl create secret generic vault-init-keys \
              --namespace vault \
              --from-literal=unseal_keys="$UNSEAL_KEYS" \
              --from-literal=root_token="$ROOT_TOKEN" \
              --dry-run=client -o yaml | /usr/local/bin/kubectl apply -f -

            echo "Unsealing Vault..."
            for key in $(echo "$UNSEAL_KEYS" | tr "," "\n" | head -n 2); do
              vault operator unseal "$key"
            done

            echo "Vault initialized and unsealed successfully."
